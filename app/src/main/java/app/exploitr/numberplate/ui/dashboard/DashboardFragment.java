package app.exploitr.numberplate.ui.dashboard;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.camera.core.CameraSelector;
import androidx.camera.core.ImageAnalysis;
import androidx.camera.core.ImageCapture;
import androidx.camera.core.ImageCaptureException;
import androidx.camera.core.ImageProxy;
import androidx.camera.core.Preview;
import androidx.camera.extensions.HdrImageCaptureExtender;
import androidx.camera.lifecycle.ProcessCameraProvider;
import androidx.camera.view.PreviewView;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.LifecycleOwner;

import com.google.common.util.concurrent.ListenableFuture;

import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

import app.exploitr.numberplate.BuildConfig;
import app.exploitr.numberplate.R;
import app.exploitr.numberplate.ui.activities.MainActivity;
import app.exploitr.numberplate.ui.rtoinfo.RTOFragment;
import app.exploitr.numberplate.worker.ImageAnalyzer;


public class DashboardFragment extends Fragment {

	private Executor executor = Executors.newSingleThreadExecutor();
	ProcessCameraProvider cameraProvider;
	PreviewView camView;
	Button analyse;
	View maskView;
	ImageCapture imageCapture;
	AlertDialog blockingDialogue;

	public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		View root = inflater.inflate(R.layout.fragment_dashboard, container, false);
		camView = root.findViewById(R.id.viewFinder);
		analyse = root.findViewById(R.id.analyse_now);
		maskView = root.findViewById(R.id.mask_cam);

		blockingDialogue = builder().create();
		analyse.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				blockingDialogue.show();

				imageCapture.takePicture(executor, new ImageCapture.OnImageCapturedCallback() {
					@Override
					public void onCaptureSuccess(@NonNull ImageProxy image) {
						new ImageAnalyzer((result, analyzedText) -> {
							if (result) {
								MainActivity.setSelection(R.id.navigation_rtoinfo);
								RTOFragment.startFromTR(analyzedText);
							} else
								Toast.makeText(getContext(), "ERROR! Please try again", Toast.LENGTH_SHORT).show();

							blockingDialogue.dismiss();
						}).analyze(image);
						super.onCaptureSuccess(image);
					}

					@Override
					public void onError(@NonNull ImageCaptureException exception) {
						exception.printStackTrace();
						super.onError(exception);
					}
				});
			}
		});

		if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
			requestPermissions(new String[]{Manifest.permission.CAMERA}, BuildConfig.VERSION_CODE);
		} else {
			startCamera();
		}
		return root;
	}

	private AlertDialog.Builder builder() {
		return new AlertDialog.Builder(requireActivity())
				.setCancelable(false)
				.setView(R.layout.progressbar_blocking);
	}

	private void startCamera() {
		executor = ContextCompat.getMainExecutor(requireContext());
		final ListenableFuture<ProcessCameraProvider> cameraProviderFuture = ProcessCameraProvider.getInstance(requireContext());
		cameraProviderFuture.addListener(() -> {
			try {
				cameraProvider = cameraProviderFuture.get();
				bindPreview(cameraProvider);
			} catch (Exception ignored) {
			}
		}, executor);
	}

	void bindPreview(@NonNull ProcessCameraProvider cameraProvider) {
		Preview preview = new Preview.Builder().build();

		CameraSelector cameraSelector = new CameraSelector.Builder()
				.requireLensFacing(CameraSelector.LENS_FACING_BACK)
				.build();

		ImageAnalysis imageAnalysis = new ImageAnalysis.Builder().build();
		ImageCapture.Builder builder = new ImageCapture.Builder();

		//enable hdr mode? tf?
		HdrImageCaptureExtender hdrImageCaptureExtender = HdrImageCaptureExtender.create(builder);
		if (hdrImageCaptureExtender.isExtensionAvailable(cameraSelector)) {
			hdrImageCaptureExtender.enableExtension(cameraSelector);
		}

		imageCapture = builder
				.setTargetRotation(requireActivity().getWindowManager().getDefaultDisplay().getRotation())
				.build();

		cameraProvider.bindToLifecycle((LifecycleOwner) requireContext(), cameraSelector, preview, imageAnalysis, imageCapture);
		preview.setSurfaceProvider(camView.createSurfaceProvider());
	}

	@Override
	public void onPause() {
		super.onPause();
		if (cameraProvider != null)
			cameraProvider.unbindAll();
	}

	@Override
	public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
		if (requestCode == BuildConfig.VERSION_CODE) {
			if (grantResults[0] != PackageManager.PERMISSION_GRANTED)
				Toast.makeText(getContext(), "Fuck you!", Toast.LENGTH_SHORT).show();
			else
				startCamera();
		}
		super.onRequestPermissionsResult(requestCode, permissions, grantResults);
	}
}