package app.exploitr.numberplate.ui.rtoinfo;

import android.animation.ObjectAnimator;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.widget.SearchView;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.cuieney.progress.library.RainbowProgressBar;

import java.lang.ref.WeakReference;
import java.util.ArrayList;

import app.exploitr.numberplate.R;
import app.exploitr.numberplate.data.VehicleData;
import app.exploitr.numberplate.ui.adapters.RTOAdapter;
import app.exploitr.numberplate.worker.WebParser;
import io.realm.Realm;

public class RTOFragment extends Fragment {

	static WeakReference<String> oldText;
	static WeakReference<SearchView> rto_num;

	private VehicleData localData = null;
	int oldProgress = 0;

	RainbowProgressBar rainProgress;
	Button searchButton, downloadButton;
	RecyclerView rto_recycler;
	LinearLayout details_sh;
	LinearLayout un_details;

	public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		View root = inflater.inflate(R.layout.fragment_rtoinfo, container, false);

		rto_num = new WeakReference<>(root.findViewById(R.id.rto_num));
		rainProgress = root.findViewById(R.id.rainProgress);
		searchButton = root.findViewById(R.id.search_);
		rto_recycler = root.findViewById(R.id.recycler_rto);
		details_sh = root.findViewById(R.id.details_sh);
		un_details = root.findViewById(R.id.un_details);
		downloadButton = root.findViewById(R.id.download_);

		setupUI();
		return root;
	}

	private void setupUI() {
		rto_num.get().setOnQueryTextListener(new SearchView.OnQueryTextListener() {
			@Override
			public boolean onQueryTextSubmit(String query) {
				executeRTO_Fetch();
				return true;
			}

			@Override
			public boolean onQueryTextChange(String newText) {
				if (newText.length() > 10)
					rto_num.get().setQuery(oldText.get(), false);
				else
					oldText = new WeakReference<>(newText);
				return false;
			}
		});
		searchButton.setOnClickListener(performSearch());
		rto_recycler.setLayoutManager(new LinearLayoutManager(getActivity()));
		downloadButton.setOnClickListener(v -> {
			if (localData != null) {
				Realm.getDefaultInstance().executeTransactionAsync(realm -> {
					realm.insertOrUpdate(localData);
					new Handler(Looper.getMainLooper()).post(() -> Toast.makeText(getContext(), "Downloaded/Updated Vehicle Info", Toast.LENGTH_SHORT).show());
				});
			} else
				Toast.makeText(getContext(), "Please Fetch Info First", Toast.LENGTH_SHORT).show(); //this should not occur
		});
	}

	private View.OnClickListener performSearch() {
		return v -> {
			executeRTO_Fetch();
		};
	}

	public static void startFromTR(String vehicleNum) {
		new Handler(Looper.getMainLooper()).post(() -> {
			oldText = new WeakReference<>(vehicleNum);
			rto_num.get().setQuery(vehicleNum, true);
		});
	}

	private void executeRTO_Fetch() {
		if (oldText.get().length() <= 10 && oldText.get().length() >= 5) {

			new WebParser().start(oldText.get(), getActivity(), new WebParser.Runner() {
				@Override
				public void onComplete(boolean result, VehicleData data) {
					new Handler(Looper.getMainLooper()).post(() -> {
						rainProgress.setVisibility(View.INVISIBLE);
						if (result) {
							ArrayList<String> tempStr = VehicleData.organize(data);
							RTOAdapter adapter = new RTOAdapter(tempStr, getActivity());
							rto_recycler.setAdapter(adapter);
							adapter.notifyDataSetChanged();

							details_sh.setVisibility(View.VISIBLE);
							un_details.setVisibility(View.GONE);
							downloadButton.setVisibility(View.VISIBLE);

							localData = data;
						} else {
							Toast.makeText(getContext(), "Wrong Vehicle Number Or No Internet Connection!", Toast.LENGTH_SHORT).show();
							localData = null;
						}
					});

				}

				@Override
				public void onProgress(int progress) {
					new Handler(Looper.getMainLooper()).post(() -> ObjectAnimator.ofInt(rainProgress, "progress", oldProgress, progress)
							.setDuration(500)
							.start());
					oldProgress = progress;
				}

				@Override
				public void onStart() {
					rainProgress.setVisibility(View.VISIBLE);
					details_sh.setVisibility(View.GONE);
					un_details.setVisibility(View.VISIBLE);
					downloadButton.setVisibility(View.GONE);
				}
			});
		}
	}
}