package app.exploitr.numberplate.worker;

import android.annotation.SuppressLint;
import android.media.Image;

import androidx.annotation.NonNull;
import androidx.camera.core.ImageAnalysis;
import androidx.camera.core.ImageProxy;

import com.google.mlkit.vision.common.InputImage;
import com.google.mlkit.vision.text.TextRecognition;
import com.google.mlkit.vision.text.TextRecognizer;

import org.apache.commons.lang3.StringUtils;

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@SuppressLint("UnsafeExperimentalUsageError")
public class ImageAnalyzer implements ImageAnalysis.Analyzer {

	//^[A-Z]{2}[ -][0-9]{1,2}(?: [A-Z])?(?: [A-Z]*)? [0-9]{4}$ pattern

	private Runner mRunner;
	TextRecognizer recognizer;
	private static final String[] listRTO = {"AP", "AR", "AS", "BR", "CG", "CH", "AN", "DL", "DD",
			"GA", "GJ", "HP", "HR", "JH", "JK", "KA", "KL", "LD", "LA", "MH", "ML", "MN", "MP",
			"MZ", "NL", "OD", "PB", "PY", "RJ", "SK", "TN", "TS", "TR", "UP", "UK", "WB"};

	public ImageAnalyzer(Runner runner) {
		mRunner = runner;
		recognizer = TextRecognition.getClient();
	}

	@Override
	public void analyze(@NonNull ImageProxy imageProxy) {
		Image mediaImage = imageProxy.getImage();
		if (mediaImage != null) {
			InputImage image = InputImage.fromMediaImage(mediaImage, imageProxy.getImageInfo().getRotationDegrees());
			recognizer.process(image)
					.addOnSuccessListener(visionText -> {
						String totalText = StringUtils.deleteWhitespace(visionText.getText())
								.replaceAll("[^A-Za-z0-9]", "").toUpperCase();

						if (totalText.contains("IND")) {
							String[] temp = totalText.split("IND");
							totalText = temp[temp.length == 1 ? 0 : 1];
						}

						if (totalText.length() > 10) {
							String testTotalText = totalText.substring(totalText.length() - 10);

							Pattern pattern = Pattern.compile("([0-9])");
							Matcher matcher = pattern.matcher(testTotalText.substring(0, 3));

							totalText = matcher.find() ? testTotalText : testTotalText.substring(1);
						}

						boolean checkCorrectRTO = false;
						for (String singleRTO : listRTO) {
							if (totalText.substring(0, 2).equalsIgnoreCase(singleRTO)) {
								checkCorrectRTO = true;
								break;
							}
						}

						if (!checkCorrectRTO) {
							totalText = predictRTO(totalText.substring(0, 2)) + totalText.substring(2);
						}

						mRunner.onComplete(true, totalText);
					})
					.addOnFailureListener(e -> {
						mRunner.onComplete(false, null);
					});
		} else
			mRunner.onComplete(false, null);
	}

	public void analyzeProblem(InputImage image) {
		recognizer.process(image)
				.addOnSuccessListener(visionText -> mRunner.onComplete(true, visionText.getText()))
				.addOnFailureListener(e -> mRunner.onComplete(false, null));
	}

	public interface Runner {
		void onComplete(boolean result, String analyzedText);
	}

	private String predictRTO(String substring) {
		char first = substring.charAt(0);
		char secon = substring.charAt(1);

		ArrayList<String> all = new ArrayList<>();
		//	ArrayList<String> prediction = new ArrayList<>(); //todo handle multi-case?

		for (String local : listRTO) {
			if (local.charAt(0) == first) {
				all.add(first + String.valueOf(possibleChar(secon)));
			} else if (local.charAt(1) == secon) {
				all.add(String.valueOf(possibleChar(first)) + secon);
			}
		}

		for (String predicable : all) {
			for (String any : listRTO) {
				/*if(predicable.equals(any)){
					prediction.add(predicable); //todo handle multi-case?1`
				} */
				if (predicable.equals(any)) {
					return any;
				}
			}
		}
		return substring; //what?
	}

	//todo
	private char possibleChar(char input) {
		switch (input) {
			case 'H':
			case 'V':
			case 'A':
				return 'W';

			case 'Y': //escape case
			case 'W':
				return 'V';

			case 'M':
				return 'N';
			case 'N':
				return 'M';

			case 'D':
				return 'B';
			case 'B':
				return 'D';

			case 'O':
				return 'C';
			case 'C':
				return 'O';

			case 'Z':
				return 'S';
			case 'S':
				return 'Z';

			default:
				return input; // why?
		}
	}
}
