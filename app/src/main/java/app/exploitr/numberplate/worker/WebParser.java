package app.exploitr.numberplate.worker;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Handler;
import android.os.Looper;
import android.widget.Toast;

import com.google.mlkit.vision.common.InputImage;

import org.apache.commons.lang3.StringUtils;
import org.jetbrains.annotations.NotNull;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;
import java.util.Objects;

import app.exploitr.numberplate.data.VehicleData;
import app.exploitr.numberplate.helpers.Logger;
import kotlin.Pair;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class WebParser {
	private static final String WEB_URL = "https://vahan.nic.in/nrservices/faces/user/searchstatus.xhtml";
	private static final String WEB_URL_SND = "https://www.parivahan.gov.in/rcdlstatus/?pur_cd=102"; //maybe later?
	private static final String WEB_URL_CAPTCHA = "https://vahan.nic.in/nrservices/cap_img_expr.jsp";

	private static final String WEB_URL_FUELS = "https://economictimes.indiatimes.com/wealth/fuel-price";

	private String[] cookies = new String[2];
	private String PARAM_VIEWSTATE = "";
	private String ACCESS_ID = "";
	private String SEARCH_NUM;
	private Context context;

	private OkHttpClient client;

	public void start(String num, Context mContext, Runner runner) {
		SEARCH_NUM = num;
		context = mContext;
		startInternal(runner);
		runner.onStart();
	}

	private void startInternal(Runner runner) {
		client = new OkHttpClient();
		Request body = new Request.Builder()
				.url(WEB_URL)
				.get()
				.build();
		client.newCall(body).enqueue(new Callback() {
			@Override
			public void onFailure(@NotNull Call call, @NotNull IOException e) {
				runner.onComplete(false, null);
				failSafeToast("Server Error! Please retry after sometime.");
			}

			@SuppressWarnings("ForLoopReplaceableByForEach")
			@Override
			public void onResponse(@NotNull Call call, @NotNull Response response) {
				runner.onProgress(10);
				int temp_index = 0;
				for (Iterator<Pair<String, String>> it = response.headers().iterator(); it.hasNext(); ) {
					Pair<String, String> this_ = it.next();
					if (this_.getFirst().equals("Set-Cookie"))
						cookies[temp_index++] = this_.getSecond().split(";")[0];
				}
				runner.onProgress(20);
				parseParametersAndProceed(Objects.requireNonNull(response.body()), runner);
				response.close();
			}
		});
	}

	private void parseParametersAndProceed(ResponseBody body, Runner runner) {
		Document main;
		try {
			main = Jsoup.parse(body.string());
			runner.onProgress(30);
		} catch (IOException e) {
			failSafeToast("Internal Processing Error! Please try again later.");
			runner.onComplete(false, null);
			e.printStackTrace();
			return;
		}
		PARAM_VIEWSTATE = main.select("input[name=\"javax.faces.ViewState\"]").get(0).val();
		ACCESS_ID = main
				.getElementsByAttributeValueStarting("id", "j_idt")
				.select("button")
				.get(0).attr("id").trim();
		runner.onProgress(40);
		decodeCaptcha(main, runner);
	}

	private void decodeCaptcha(Document main, Runner runner) {
		int answer;
		String problem = main.getElementsByAttributeValueStarting("id", "capatcha").get(0)
				.getElementsByAttributeValueContaining("class", "captcha").text(); //really?
		problem = StringUtils.deleteWhitespace(problem).replace("=", "");

		if (main.getElementsByAttributeValueStarting("alt", "capatcha").size() > 0) {
			client = new OkHttpClient();
			Request body = new Request.Builder()
					.url(WEB_URL_CAPTCHA)
					.get()
					.build();
			client.newCall(body)
					.enqueue(new Callback() {
						@Override
						public void onFailure(@NotNull Call call, @NotNull IOException e) {
							e.printStackTrace();
							failSafeToast("Internal Processing Error! Please check for app updates");
						}

						@Override
						public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
							InputStream inputStream = Objects.requireNonNull(response.body()).byteStream();
							Bitmap bitmap = BitmapFactory.decodeStream(inputStream);
							new ImageAnalyzer((result, analyzedText) -> {
								Logger.log(analyzedText.replaceAll("\n",""));
								if (StringUtils.containsAny(analyzedText, '-', '/', '*', '+')) {
									fetchResults(findAnswer(StringUtils.deleteWhitespace(analyzedText).replace("=", "")), runner);
								} else
									start(SEARCH_NUM, context, runner);
							}).analyzeProblem(InputImage.fromBitmap(bitmap, 0));
						}
					});
			return;
		} else if ((answer = findAnswer(problem)) != -1) {
			fetchResults(answer, runner);
		} else {
			failSafeToast("Internal Processing Error! Please check for app updates");
			runner.onComplete(false, null);
			return;
		}
		runner.onProgress(60);
	}

	private int findAnswer(String problem) {
		if (problem.contains("+")) {
			String[] val_ = problem.split("\\+");
			return Integer.parseInt(val_[0]) + Integer.parseInt(val_[1]);
		} else if (problem.contains("-")) {
			String[] val_ = problem.split("-");
			return Integer.parseInt(val_[0]) - Integer.parseInt(val_[1]);
		} else if (problem.contains("*")) {
			String[] val_ = problem.split("\\*");
			return Integer.parseInt(val_[0]) * Integer.parseInt(val_[1]);
		} else if (problem.contains("/")) {
			String[] val_ = problem.split("/");
			return Integer.parseInt(val_[0]) / Integer.parseInt(val_[1]);
		} else if (problem.contains("greater")) {
			String[] val_ = problem.split("greater")[1].split(",");
			return Math.max(Integer.parseInt(val_[0]), Integer.parseInt(val_[1]));
		} else if (problem.contains("lesser")) {
			String[] val_ = problem.split("lesser")[1].split(",");
			return Math.min(Integer.parseInt(val_[0]), Integer.parseInt(val_[1]));
		} else
			return -1;
	}

	private void fetchResults(int answer, Runner runner) {
		Request body = new Request.Builder()
				.url(WEB_URL)
				.post(new FormBody.Builder()
						.add("javax.faces.partial.ajax", "true")
						.add("javax.faces.source", ACCESS_ID)
						.add("javax.faces.partial.execute", "@all")
						.add("javax.faces.partial.render", "rcDetailsPanel resultPanel userMessages capatcha txt_ALPHA_NUMERIC")
						.add(ACCESS_ID, ACCESS_ID)
						.add("masterLayout", "masterLayout")
						.add("regn_no1_exact", SEARCH_NUM)
						.add("txt_ALPHA_NUMERIC", String.valueOf(answer))
						.add("javax.faces.ViewState", PARAM_VIEWSTATE)
						.build())
				.addHeader("Accept", "application/xml, text/xml, */*; q=0.01")
				.addHeader("Accept-Language", "en-US,en;q=0.9,bn;q=0.8")
				.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36")
				.addHeader("X-Requested-With", "XMLHttpRequest")
				.addHeader("Cookie", cookies[0])
				.addHeader("Cookie", cookies[1])
				.addHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
				.addHeader("Faces-Request", " partial/ajax")
				.addHeader("Referer", "https://vahan.nic.in/nrservices/faces/user/searchstatus.xhtml")
				.addHeader("Host", "vahan.nic.in")
				.addHeader("Connection", "keep-alive")
				.addHeader("Sec-Fetch-Site", "same-origin")
				.addHeader("Sec-Fetch-Mode", "cors")
				.addHeader("Sec-Fetch-Dest", "empty")
				.addHeader("Origin", "https://vahan.nic.in")
				.build();
		client.newCall(body).enqueue(new Callback() {
			@Override
			public void onFailure(@NotNull Call call, @NotNull IOException e) {
				failSafeToast("Internal Processing Error! Please try again later.");
				runner.onComplete(false, null);
			}

			@Override
			public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
				runner.onProgress(80);
				processResults(Objects.requireNonNull(response.body()).string(), runner); //Response Body is NEVER NULL
			}
		});
	}

	private void processResults(String body, Runner runner) {
		if (body == null || body.equals("") || body.contains("Enter Vehicle No properly")
				|| body.contains("Not Found") || body.contains("not found"))
			runner.onComplete(false, null);
		else {
			Logger.log(body);
			/*try {
				String f_response = body;
				f_response = "<!DOCTYPE html><html><body>" +
						f_response.substring(StringUtils.ordinalIndexOf(f_response, "<div", 3), f_response.lastIndexOf("</div>")) +
						"</div></body></html>";

				Document finalDoc = Jsoup.parse(f_response);
				Elements all = finalDoc.select("body").get(0).getElementsByClass("row");

				runner.onProgress(90);

				VehicleData data = new VehicleData();
				data.setRTO_INFO(all.get(1).getElementsByClass("font-bold").get(0).text())
						.setREG_NO(all.get(2).getElementsByClass("bottom-space-5").get(1).text())
						.setREG_DATE(all.get(2).getElementsByClass("bottom-space-5").get(3).text())
						.setCHASSIS_NO(all.get(3).getElementsByClass("bottom-space-5").get(1).text())
						.setENGINE_NO(all.get(3).getElementsByClass("bottom-space-5").get(3).text())
						.setOWNER_NAME(all.get(4).getElementsByClass("bottom-space-5").get(1).text())
						.setVEHICLE_CLASS(all.get(5).getElementsByClass("bottom-space-5").get(1).text())
						.setFUEL_TYPE(all.get(5).getElementsByClass("bottom-space-5").get(3).text())
						.setMAKER_MODEL(all.get(6).getElementsByClass("bottom-space-5").get(1).text())
						.setFITNESS_(all.get(7).getElementsByClass("bottom-space-5").get(1).text())
						.setMV_TAX_(all.get(7).getElementsByClass("bottom-space-5").get(3).text())
						.setINSURANCE_(all.get(8).getElementsByClass("bottom-space-5").get(1).text())
						.setPUCC_(all.get(8).getElementsByClass("bottom-space-5").get(3).text())
						.setEMISSION_NORMS(all.get(9).getElementsByClass("bottom-space-5").get(1).text())
						.setRC_STATS(all.get(9).getElementsByClass("bottom-space-5").get(3).text());

				runner.onProgress(100);
				runner.onComplete(true, data);
			} catch (Exception error) {
				error.printStackTrace();
				runner.onComplete(false, null);
			}*/
			/*
			Test Code
			Document test = Jsoup.parse(f_response);
			Element y = test.select("body").get(0);
			Elements z = y.getElementsByClass("row");
			Logger.log(z.get(1).getElementsByClass("font-bold").get(0).text()); //RTO info
			Logger.log(z.get(2).getElementsByClass("bottom-space-5").get(1).text()); //Reg num
			Logger.log(z.get(2).getElementsByClass("bottom-space-5").get(3).text()); //Reg date
			Logger.log(z.get(3).getElementsByClass("bottom-space-5").get(1).text()); //Chassis
			Logger.log(z.get(3).getElementsByClass("bottom-space-5").get(3).text()); //Engine
			Logger.log(z.get(4).getElementsByClass("bottom-space-5").get(1).text()); //Owner
			Logger.log(z.get(5).getElementsByClass("bottom-space-5").get(1).text()); //Vehicle class
			Logger.log(z.get(5).getElementsByClass("bottom-space-5").get(3).text()); //Fuel
			Logger.log(z.get(6).getElementsByClass("bottom-space-5").get(1).text()); //Maker/Model
			Logger.log(z.get(7).getElementsByClass("bottom-space-5").get(1).text()); //Fitness
			Logger.log(z.get(7).getElementsByClass("bottom-space-5").get(3).text()); //MVTax
			Logger.log(z.get(8).getElementsByClass("bottom-space-5").get(1).text()); //Insurance
			Logger.log(z.get(8).getElementsByClass("bottom-space-5").get(3).text()); //PUCC
			Logger.log(z.get(9).getElementsByClass("bottom-space-5").get(1).text()); //Emission norms
			Logger.log(z.get(9).getElementsByClass("bottom-space-5").get(3).text()); //RC Status*/
		}
	}

	private void failSafeToast(String toast_Text) {
		if (Looper.myLooper() == Looper.getMainLooper())
			Toast.makeText(context, toast_Text, Toast.LENGTH_SHORT).show();
		else
			new Handler(Looper.getMainLooper())
					.post(() -> Toast.makeText(context, toast_Text, Toast.LENGTH_SHORT).show());
	}

	public interface Runner {
		void onComplete(boolean result, VehicleData data);

		void onProgress(int progress);

		void onStart();
	}
}
